#include<iostream>
#include<map>
#include <unordered_map>
#include<vector>
#include <numeric>
#include <set>
#include <algorithm>

using namespace std;

/*
    3 = live to dead
    2 = dead to live
    1 = live
    0 = dead
*/
int getLiveCells(vector<vector<int>>& board, int i, int j){
    int n = board.size();
    int m = board[0].size();
    int livecellsCount =0;

    vector<vector<int>> dir = {{-1,-1}, {-1,0}, {-1, 1}, {0, 1}, {1,1}, {1, 0}, {1,-1}, {0,-1}};

    for(auto vec: dir){
        int row = vec[0]+i;
        int col = vec[1]+j;

        if(row<0 || row>= n || col < 0 || col>= m){
            continue;
        }

        if(board[row][col] == 1 || board[row][col] == 3){
            livecellsCount++;
        }
    }

    return livecellsCount;
}

void gameOfLife(vector<vector<int>>& board) {
        if(board.size()==0) return;

        int n = board.size();
        int m = board[0].size();
        int livecells =0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                livecells = getLiveCells(board, i, j);
                if(board[i][j]==1){
                    if(livecells<2 || livecells>3){
                        board[i][j] = 3;
                    }
                }
                else{
                    if(livecells==3){
                        board[i][j]=2;
                    }
                }
            }   
            
        }

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if(board[i][j]==1 || board[i][j]==2 ){
                    board[i][j]=1;
                }
                else{
                    board[i][j]=0;
                }
            }
            
        }
        
        


}

int main()
{
    vector<vector<int>> vec = {{0,1,0}, {0,0,1}, {1,1,1}, {0,0,0}};
    // vector<int> vec = {1, 1 ,1 ,0};
    int tar = 1;

    gameOfLife(vec);

    for(auto mak: vec){
        for(int i: mak) cout<<i <<" ";
        cout<<endl;
    }  

    return 0;
}

// [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]