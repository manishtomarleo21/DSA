#include<iostream>
#include<map>
#include <unordered_map>
#include<vector>
#include <numeric>
#include <set>
#include <algorithm>

using namespace std;
bool helper(vector<vector<char>>& board, string word, int i, int j, int row, int col, int k){
  if(k == word.size()) return true;
  if(i<0 || i>=row || j<0 || j>= col || word[k] != board[i][j]){
    return false;
  }
  // if(word.size()==1 && board[i][j]==word[k]) return true;
  char ch = board[i][j];
  board[i][j] = '_';

  bool op1 = helper(board, word, i+1, j, row, col, k+1);
  bool op2 = helper(board, word, i-1, j, row, col, k+1);
  bool op3 = helper(board, word, i, j+1, row, col, k+1);
  bool op4 = helper(board, word, i, j-1, row, col, k+1);
  
  board[i][j] = ch;
  return op1 || op2 || op3 || op4;
}

int main()
{

  // vector<vector<int>> vec = {{1,2,3, 4},{5,6, 7, 8},{9,10,11, 12}};
  vector<vector<char>> vec = {{'A','B','C','E'},{'S','F','C','S' },{'A','D','E','E'}};
  string word = "ABCCED";
  int row = vec.size();
  if(row==0) cout<<false<<endl;

  int col = vec[0].size();

  if(word.size()==0) cout<<false<<endl;

  for (int i = 0; i < row; i++)
  {
    for (int j = 0; j < col; j++)
    {
        if(word[0]==vec[i][j]){
          if(helper(vec, word, i, j, row, col, 0)) cout<<true<<endl;
        }
    }
    
  }
  // cout<<false<<endl;
  


  
  
  

  


 
  return 0;
}
