#include<bits/stdc++.h>
#include<vector>

using namespace std;

//Define the structs Workshops and Available_Workshops.
struct Workshop 
{
    int startTym;
    int dur;
    int endTym;
};

struct Available_Workshops
{
    int n;
    // struct Workshop *arr;
    vector <Workshop> arr;
    Available_Workshops(int &no){
        n = no;
        arr = vector <Workshop> (no);
    }
};

bool compare(Workshop &w1, Workshop&w2){
    return w1.endTym < w2.endTym;
}


//Implement the functions initialize and CalculateMaxWorkshops
Available_Workshops* initialize (int start_time[], int duration[], int n){
    Available_Workshops *obj = new Available_Workshops(n);
    obj->n = n;

    for (int i = 0; i < n; i++)
    {
        obj->arr[i].startTym = start_time[i];
        obj->arr[i].dur = duration[i];
        obj->arr[i].endTym = start_time[i]+duration[i];
        // cout<<obj->arr[i].endTym<<"this is the check"<<endl;
    }

    sort(obj->arr.begin(), obj->arr.end(), compare);
    return obj;
    
}

int CalculateMaxWorkshops(Available_Workshops* ptr){
    int max = 0;
    int end_tm = 0;
 
    
    for (int i = 0; i <ptr->n ; i++)
    {
       if (ptr->arr[i].startTym >= end_tm )
       {
            end_tm = ptr->arr[i].endTym;
            max++;
            
       }

    }
    return max;
    
}


int main(int argc, char *argv[]) {
    int n; // number of workshops
    cin >> n;
    // create arrays of unknown size n
    int* start_time = new int[n];
    int* duration = new int[n];

    for(int i=0; i < n; i++){
        cin >> start_time[i];
    }
    for(int i = 0; i < n; i++){
        cin >> duration[i];
    }

    Available_Workshops * ptr;
    ptr = initialize(start_time,duration, n);
    cout << CalculateMaxWorkshops(ptr) << endl;
    return 0;
}

/*

6
1 3 0 5 5 8
1 1 6 2 4 1

*/