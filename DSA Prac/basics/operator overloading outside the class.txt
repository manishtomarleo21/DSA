//Operator Overloading

#include<iostream>
#include<ostream>

using namespace std;

class Complex
{
public:
    int a,b;
    void input(string s)
    {
        int v1=0;
        int i=0;
        while(s[i]!='+')
        {
            v1=v1*10+s[i]-'0';
            i++;
        }
        while(s[i]==' ' || s[i]=='+'||s[i]=='i')
        {
            i++;
        }
        int v2=0;
        while(i<s.length())
        {
            v2=v2*10+s[i]-'0';
            i++;
        }
        a=v1;
        b=v2;
    }

	// Complex & operator+(Complex y){
	// 	this->a = this->a + y.a;
	// 	this->b = this->b + y.b;

	// 	return *this;
	// }

	// friend ostream& operator<<(ostream &o, Complex &obj1){
    //     return o<<obj1.a<<" + "<<"i"<<obj1.b;
    // }
};

Complex operator+(Complex y , Complex r ){
		Complex temp; 
		temp.a = y.a + r.a;
		temp.b = y.b + r.b;

		return temp;
}

ostream & operator<<(ostream &o, Complex &obj1){
        return o<<obj1.a<<"+"<<"i"<<obj1.b;
}




//Overload operators + and << for the class complex
//+ should add two complex numbers as (a+ib) + (c+id) = (a+c) + i(b+d)
//<< should print a complex number in the format "a+ib"

int main()
{
    Complex x,y;
    string s1,s2;
    cin>>s1;
    cin>>s2;
    x.input(s1);
    y.input(s2);
    Complex z=x+y;
    cout<<z<<endl;
}


/*
3+i4
5+i6


*/