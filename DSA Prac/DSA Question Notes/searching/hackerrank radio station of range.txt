#include <set>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
#include <stack>
#include <cstring>
#include <string>

using namespace std;

int insertionSort(vector<int> arr, int k) { //small big
 
 int coverage, i=0, roof, count = 0;
 sort(arr.begin(), arr.end());

 while (i<arr.size())
 {
    coverage = arr[i]+k; //this will give where ti apply tower
    while (i<arr.size()&& arr[i]<=coverage) // this will give right side
    {
         i++;
    }
    i--; //for single time only to get one step back till last coverage to right side
   roof=arr[i];
  

   //for next tower
    coverage = arr[i]+k;
    while (i<arr.size() && arr[i]<= coverage)
    {
      i++;
    }
    count++;
    
 }
 
   return count;

  
}


int main()
{

  vector<int> arr = {7, 2, 4, 6, 5, 9, 12, 11};
//   vector<int> brr = {11, 4, 11, 7, 3, 7, 10, 13, 4, 8, 12, 11, 10, 14, 12};
  int k = 2;
  
  int ab  = insertionSort(arr, k);
  cout<<ab<<endl;
 


  return 0;
}
