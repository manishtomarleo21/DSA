#include <iostream>
#include <vector>
#include <stack>

using namespace std;

//largest rectangle

vector<int> nextSmallerElement(vector<int> vec, int n){
    vector<int> ans(n);
    stack<int> st;
    st.push(-1);

    for (int i = n-1; i >= 0; i--)
    {
        int curr = vec[i];
        while (st.top()!=-1 && curr <= vec[st.top()])
        {
            st.pop();
        }
        ans[i] = st.top();
        st.push(i);
    }
    return ans;
    
}


vector<int> prevSmallerElement(vector<int> vec, int n){
    vector<int> ans(n);
    stack<int> st;
    st.push(-1);

    for (int i = 0; i < n; i++)
    {
        int curr = vec[i];
        while (st.top()!=-1 && curr <= vec[st.top()])
        {
            st.pop();
        }
        ans[i] = st.top();
        st.push(i);
    }
    return ans;
    
}



int largestRectangleAre(vector<int> vec){
    int n = vec.size();

    vector<int> next(n);
    next = nextSmallerElement(vec, n);

    vector<int> prev(n);
    prev = prevSmallerElement(vec, n);

    int area = INT_MIN;

    //now we have prev smaller lenght then next smaller length
    //to calculate max area of rectangular

    for (int i = 0; i < n; i++)
    {
        int l = vec[i]; //lenght which is given in the vector
        
       
        //some test condition where all of the heights are same so all cases will show -1
        //and then our area comes -1 which not possible to avoid this
        if (next[i]==-1)
        {
            next[i] = n;
        }
       
        int b = next[i]-prev[i]-1;     //n-p-1 
        int newArea = l*b;
        

        area = max(area, newArea);
    }
    
    return area;   


}

int main()
{
     vector<int> heights = {2, 1, 5, 6, 2, 3};
    int n = heights.size();

    int num = largestRectangleAre(heights);
    cout<<num<<endl;

   

    return 0;
}
