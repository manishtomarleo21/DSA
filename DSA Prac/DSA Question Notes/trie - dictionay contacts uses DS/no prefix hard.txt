#include <set>
#include <iostream>
#include <algorithm>
#include <queue>


using namespace std;

class TrieNode
{
    public:
        char data;
        TrieNode* children[26];
        bool isTerminal;

        TrieNode(char ch){
            data = ch;
            for (int i = 0; i < 26; i++)
            {
                children[i] = NULL;
            }
            isTerminal = false;
            
        }
};

class Trie
{
    public:
        TrieNode* root;
        Trie(){
            root = new TrieNode('\0');
        }

        void insertUtil(TrieNode* root, string word){
            //Base case for the recursion
            if(word.length()==0){
                root->isTerminal = true;
                return;
            }

            //assumptiom all the characters in upper letter
            //its word mapping with letter and number A-0 b-1 and z-25
            int index = word[0]-'a'; 
            TrieNode* child;

            //if present in the trie
            if(root->children[index]!=NULL){
                child = root->children[index];
            }
            else{
                //if absent from the trie a char if absent add in the trie
                child = new TrieNode(word[0]);
                root->children[index] = child;
            }

            
            insertUtil(child, word.substr(1));

        }

        void insertWord(string word){
            insertUtil(root, word);
        }

        bool searchUtil(TrieNode* root, string word){
            //base case
            if(word.length()==0){
                return root->isTerminal;
            }

            int index = word[0]-'a';
            TrieNode* child;

            //if present
            if(root->children[index]!=NULL){
                child = root->children[index];
            }
            else{
                //if absence
                return false;
            }

            return searchUtil(child, word.substr(1));
        }

        bool searchWord(string word){
            return searchUtil(root, word);
        }

        bool prefixWordUtil(TrieNode* root, string word){
           TrieNode* copy = root;
           for (int i = 0; i < word.length(); i++)
           {
               int index = word[i]-'a';
               if(copy->isTerminal){
                  return true;
               }
               if(!copy->children[index]){
                  return false;
               }
               copy = copy->children[index];
           }
           if(copy){
            return true;
           }
           return false;

        }

        bool prefixWord(string word){
            return prefixWordUtil(root, word);
        }


};


int main()
{

    Trie *t = new Trie();
    bool flag = false;
    // t->insertWord("HELP");
    // t->insertWord("JUMPER");

    vector<string> vec = {"aab", "defgab", "abcde", "aabcde", "bbbbbbbbbb", "jabjjjad"};

        for (int i = 0; i < vec.size(); i++)
        {
            // int res = t->prefixWord(vec[i]);
            if(t->prefixWord(vec[i])){
                  cout<<"BAD SET"<<endl;
                  cout<<vec[i]<<endl;
                  flag = true;
                  break;
            }
           t->insertWord(vec[i]);
        }
        if(flag == false) cout<<"GOOD SET"<<endl;


    // int val = t->prefixWord("HE");
    // cout<<val<<endl;
    
    

    



    
    return 0;
}

