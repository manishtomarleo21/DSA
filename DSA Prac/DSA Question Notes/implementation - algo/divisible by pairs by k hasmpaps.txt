//optimized & brute force is below

#include <set>
#include <iostream>
#include <algorithm>
#include <map>



using namespace std;

//Divisible sum pairs by k 
//used hashmaps for O(n)

// brute force takes O(n2)
//in this we store the reminder %k and store the count of it as a pair if its 1 we look for 3 if k is 4


int main()
{

 vector<int> vec = {2, 8, 6, 8, 4};
 int k = 3;

 unordered_map<int, int> m;
long long ans = 0;
 for (int i = 0; i < vec.size(); i++)
 {
    int reminder = vec[i]%k;
    if(reminder!=0){
        ans+=m[k-vec[i]%k]; //its same as k-reminder
    }
    else{
        ans+= m[0];
    }
    m[reminder]++;
 }
 
 cout<<ans<<endl;


    

    
    return 0;
}



-----------------------------------------
#include <set>
#include <iostream>
#include <algorithm>

//Hackerrank question 
//BETWEEN TWO SETS
//SOLVE BY GCD AND LCM ALGO

using namespace std;

int main()
{

    vector<int> vec = {1, 3, 2, 6, 1, 2};
    // vector<int> vec = {4};

    int k = 3, count = 0;


    for (int i = 0; i < vec.size(); i++)
    {
        for (int j = i+1; j < vec.size(); j++)
        {
            if((vec[i]+vec[j])%k == 0){
                count++;
            }
        }
        
    }

    cout<<count<<endl;
    

   
    
    

    return 0;
}
/*

count++;
        sum+=vec[i];
        if(count<=m && sum == d){
            result++;
            sum = 0;
            count=0;
            if(i!=0) i-=1;


*/