#include <bits/stdc++.h>

using namespace std;

class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode *next;

        SinglyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
        }
};

class SinglyLinkedList {
    public:
        SinglyLinkedListNode *head;
        SinglyLinkedListNode *tail;

        SinglyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            SinglyLinkedListNode* node = new SinglyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
            }

            this->tail = node;
        }
};

void print_singly_linked_list(SinglyLinkedListNode* node, string sep, ofstream& fout) {
    while (node) {
        fout << node->data;

        node = node->next;

        if (node) {
            fout << sep;
        }
    }
}

void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the findMergeNode function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode* next;
 * };
 *
 */

int length(SinglyLinkedListNode *a){
    int i = 0;
    while (a!=NULL)
    {
        i++;
    }
    return i;
    
}

int findMergeNode(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    // SinglyLinkedListNode* temp = head2;
    // while (head1->next != NULL)
    // {
    //     head2 = temp;
    //     while (head2->next != NULL)
    //     {
    //         if (head1->next == head2->next)
    //         {
    //         return head1->data;
    //         }
    //         else{
    //             head2 = head2->next;
    //         }
    //     }
        
    //     head1 = head1->next;
        
    // }

    //Another approach as the above one giving the error 
    //Approach is to get the merging point is we will get the length of both the list
    //minus and get the diffrence which is bigger in length we will shift till difference number
    // then we will move both pointers together so they can reach to the merging point toghetger
    // int lenA = length(head1); 
    // int lenB = length(head2); 
    // unsigned int diff = lenA-lenB;

    // if (lenB>lenA)
    // {
    //     for (int i = 0; i < diff; i++)
    //     {
    //         head1= head1->next;
    //     }

    // }
    // else{
    //        for (int i = 0; i < diff; i++)
    //         {
    //         head1= head1->next;
    //         } 
    //     }
    // while (head1 != NULL && head2!=NULL)
    // {
    //     if (head1->next == head2->next)
    //     {
    //         return head1->next->data;
    //     }
    //     else{
    //         head1= head1->next;
    //         head1= head1->next;
    //     }
        
    // }
    
    // return 0;
    //ABove approach also giving the error now we gonna trversal through both of the list 
    //means from one list to  another as this way when we will jump from one to anther 
    //it will both stop at the merging point list 

    SinglyLinkedListNode* ptr1 = head1;
    SinglyLinkedListNode* ptr2 = head2;

    while (ptr1!=ptr2)
    {
        if (ptr1->next == NULL)
        {
            ptr1 = head2;
        }
        else{
            ptr1 = ptr1->next;
        }
        if(ptr2->next == NULL){
            ptr2 = head1;
        }
        else{
            ptr2 = ptr2->next;
        }
        
    }
    return ptr1->data;


}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int tests;
    cin >> tests;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int tests_itr = 0; tests_itr < tests; tests_itr++) {
        int index;
        cin >> index;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        SinglyLinkedList* llist1 = new SinglyLinkedList();

        int llist1_count;
        cin >> llist1_count;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        for (int i = 0; i < llist1_count; i++) {
            int llist1_item;
            cin >> llist1_item;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');

            llist1->insert_node(llist1_item);
        }
      
      	SinglyLinkedList* llist2 = new SinglyLinkedList();

        int llist2_count;
        cin >> llist2_count;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        for (int i = 0; i < llist2_count; i++) {
            int llist2_item;
            cin >> llist2_item;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');

            llist2->insert_node(llist2_item);
        }
      
      	SinglyLinkedListNode* ptr1 = llist1->head;
      	SinglyLinkedListNode* ptr2 = llist2->head;
      
      	for (int i = 0; i < llist1_count; i++) {
            if (i < index) {
          		ptr1 = ptr1->next;
            }
        }
      
      	for (int i = 0; i < llist2_count; i++) {
          	if (i != llist2_count-1) {
          		ptr2 = ptr2->next;
            }
        }
      
      	ptr2->next = ptr1;

        int result = findMergeNode(llist1->head, llist2->head);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
