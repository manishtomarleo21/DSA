
#include <vector>
#include <iostream>
#include <deque>

using namespace std;

//THis question is of sliding window question 
// in window take out max and in all max result take out min for each query this is to take out min for
// for max min there is func which is returning the vector

int main()
{
    vector<int> vec = {33, 11, 44, 11, 55};
    int k = 1;

    deque<int> deq;
    
    int i=0;

    for(; i<k; i++){ //running loop for first window
        //for every element the previous smaller element is useless so remove from the deque
        while (!deq.empty() && vec[i]>= vec[deq.back()])
        {
            //remove from the last
            deq.pop_back();
        }
        //upper while till there is present a bigger val from the back if found bigger it will stop and we push
        // the current index
        deq.push_back(i);
    }

    //now a starting window is done for the rest of the element
    // we will run new for loop from after the k window size
    for (;i < vec.size(); i++)
    {
        //largest will be at the top so 
        cout<<vec[deq.front()]<<" ";

        //remove which is out of the window
        while (!deq.empty() && deq.front()<=i-k){
            deq.pop_front();
        }

        //remove the elemts from the which is smaller then the current val or
        //useless elements 
        while (!deq.empty() && vec[i]>= vec[deq.back()])
        {
            deq.pop_back();
        }
        deq.push_back(i);
        

    }
    cout<<vec[deq.front()]<<" ";


    return 0;
}




vector<int> solve(vector<int> arr, vector<int> queries) {

    vector<int> res;
    
    for (int d = 0; d < queries.size(); d++){
        
        deque<int> deq;
        vector<int> ans;
        int k = queries[d];
        int i=0;
        for (; i < k; i++)
        {
            while (!deq.empty() && arr[i]>= arr[deq.back()])
            {
                deq.pop_back();
            }
            deq.push_back(i);
            
        }

        for(; i< arr.size(); i++){

            ans.push_back(arr[deq.front()]);

            while (!deq.empty() && deq.front() <= i-k)
            {
                    deq.pop_front();
            }


            while (!deq.empty() && arr[i]>= arr[deq.back()])
            {
                deq.pop_back();
            }
            deq.push_back(i);

        }
        ans.push_back(arr[deq.front()]);
        res.push_back(*min_element(ans.begin(), ans.end())); 
   
    }
    for(auto x: res) cout<<x<<endl;

    return res;

}

__________________________________________________________
simple interation approach but failed the result 
to optimize it we used the double ended queue
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;




int main()
{
   
    int n,q;
    cin>>n>>q;

   vector<int> arr(n);

    vector<int> queries(q);
    int a = 0;
    while (n--)
    {
        cin>>arr[a];
        a++;
    }
    a = 0;
    while (q--)
    {
        cin>>queries[a];
        a++;
    }
    
   

  
   for (int d = 0; d < queries.size(); d++)
   {     
      vector<int> ans;
      int i=0; 
      int j=0;
      int maxNum = INT_MIN;
      int minNUM = INT_MAX;

       if (queries[d]==1)
         {
            cout<<*min_element(arr.begin(), arr.end())<<endl;
            d++;
         }

      while (j<arr.size())
      {
        
         
         if (j-i+1<queries[d])
         {
            maxNum = max(maxNum, arr[j]);
            j++;
         }
         else{
            maxNum = max(maxNum, arr[j]);
            ans.push_back(maxNum);
            i++;
            j++;
         }
         
      }
      cout<<*min_element(ans.begin(), ans.end())<<endl;   
   }
   
   
   
    return 0;
}


