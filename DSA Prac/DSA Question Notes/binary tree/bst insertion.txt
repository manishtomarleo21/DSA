#include <iostream>
#include <cstddef>
	
class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

class Solution {
    public:
  
    void preOrder(Node *root) {

          if( root == NULL )
              return;

          std::cout << root->data << " ";

          preOrder(root->left);
          preOrder(root->right);
      }

/* you only have to complete the function given below.  
Node is defined as  

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/



   Node * insert(Node * root, int data) {
        if (root == NULL)
        {
            root = new Node(data);
            return root;
        }
        
        Node* temp = root;
        Node* prev = NULL;
        while (temp!=NULL)
        {
            prev = temp;
            if (temp->data==data)
            {
                return NULL;
            }
            else if (data<=temp->data)
            {
                temp = temp->left;
            }
            else{
                temp = temp->right;
            }

        }

        Node* ptr = new Node(data);
        if (data<prev->data)
        {
            prev->left = ptr;
        }
        else{
            prev->right = ptr;
        }

        return root;
    }

}; 

//SImple recursion method
/*if(value <= root->data)
    root->left = insert(root->left, value);
  else
    root->right = insert(root->right, value);
  
  return root;
*/




int main() {
    
    Solution myTree;
    Node* root = NULL;
    
    int t;
    int data;

    std::cin >> t;

    while(t-- > 0) {
        std::cin >> data;
        root = myTree.insert(root, data);
    }
	myTree.preOrder(root);
    return 0;
}
