#include<iostream>
#include<queue>

//used breadth first search algo
//queue
//inorder traversal

using namespace std;

int left_arr[1024];
int right_arr[1024];

void swapping(int root, int k){
    queue<int> q;
    q.push(root);

    
    int level = 0;

    while (!q.empty())
    {
        level++;
        int size = q.size();
        while (size--)
        {
            //first visit node
            //left 
            //right
            //swapping

            int p = q.front();
            q.pop();

            if (level%k==0)
            {
                swap(left_arr[p], right_arr[p]);
            }
            

            if (left_arr[p]!=-1)
            {
                q.push(left_arr[p]);
            }
            if (right_arr[p]!=-1)
            {
                q.push(right_arr[p]);
            }
            
        }
        

    }
    
}

void inOrderTraverse(int root){
    if (root==-1)
    {
        return;
    }
    inOrderTraverse(left_arr[root]);
    cout<<root<<" ";
    inOrderTraverse(right_arr[root]);
    
}

int main()
{
    //number of nodes 2d array by we take as left and right array
    int n,a,b;
    cin>>n;
   
    for (int i = 1; i <= n; i++)
    {
        cin>>a>>b;
        left_arr[i] = a;
        right_arr[i] = b;

    }

    //number of test cases
    int testcases, k;
    cin>>testcases;
    while (testcases--)
    {
        cin>>k;
        //calling the function which will create a tree and swap the value
        swapping(1, k);

        //print inorder 1
        inOrderTraverse(1);
        cout<<endl;
    }
    

    

    return 0;
}
