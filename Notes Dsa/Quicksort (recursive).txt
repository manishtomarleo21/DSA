#include <stdio.h>

// QUick sort algo check the DH diary 4Feb for explaination

void printArray(int *arr, int len)
{
    for (int i = 0; i < len; i++)
    {
        printf("%d, ", arr[i]);
    }
    printf("\n");
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[low];
    int i = low + 1;
    int j = high;
    int temp;

    do
    {
        while (arr[i] <= pivot)
        {
            i++;
        }
        while (arr[j] > pivot)
        {
            j--;
        }

        if (i < j) //we will swap the value of bigger and smaller once we find it only if i is smaller to j
        {
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

    } while (i < j);

    //We will swap in array pivot when j becomes smaller than i arr[low] is pivot
    temp = arr[low];
    arr[low] = arr[j];
    arr[j] = temp;
    return j;

}

// it works with i == low+1 and j = high pivot is which we do partition with means if a val which is bigger than
// pivot shift to right and val which is smaller than pivot shift to right
// run recursively
void quickSort(int *arr, int low, int high)
{
    int partiotionIndex; // this will return the index of the pivot

    if (low < high)
    {
        partiotionIndex = partition(arr, low, high);
       // printArray(arr, 7);
        quickSort(arr, low, partiotionIndex - 1);  // sort left sub array
        quickSort(arr, partiotionIndex + 1, high); // sort right sub array
    }
}

int main()
{
    int arr[] = {12, 15, 3, 65, 114, 64, 88};
    int len = 7;

    printArray(arr, len);
    quickSort(arr, 0, len - 1);
    printArray(arr, len);
    /*

    //Sort Explain
    //pivot   i                                j
    //12,    15, 3, 65, 114, 64, 88, 75, 45 , 112
    //i will move till its find the bigger val then pivot
    //j will move till its find the smaller val then pivot
        //   i    j        
    //12,    15, 3, 65, 114, 64, 88, 75, 45 , 112
    //now i j will swap the value if (i<j) here it is true
    //        i  j
    //12,    3, 15, 65, 114, 64, 88, 75, 45 , 112
    // now they will i++ j-- // it will false the conditon if (i<j) now j<i so we will sway pivot with j's val
    pivot     j  i
    //12,    3, 15, 65, 114, 64, 88, 75, 45 , 112
    
    after swapping
           j   i
    3,    12, 15, 65, 114, 64, 88, 75, 45 , 112
    //We will return j index for the recursion function that will work on the sub arrays

    //now we can see that j index is partiotioned in two sub arrays 
    1. quictsort function will work on right side of the j value which we have reutrned
    2. Another quictsort function will work on left side of the j value which we have reutrned




*/
    return 0;
}
