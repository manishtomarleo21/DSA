#include<iostream>
#include<vector>

using namespace std;

//longest common subsequences
//Its part of the DP where we find the sub character of the two string without contiunuation which is in
//ths longest common substring 
//By this method we can find the lCs lenght recursively
//

//LCS we declare code in three ways
//1 recursion --> Recrsion

//2 recursion with memoisation so we can save woriking and save the 
//work which is doning over and over in recursion -->> Recursion and matrix


//3 Bottom up approach with DP which is done by without recursion only matrix ==>> MAtrix only 

//This is first part with the recursion only

int lcs(string x, string y, int m, int n){
    //Base condion where the recursion should stop
    //This will return 0 when string lenth become zero
    if (m == 0 || n == 0)
    {
        return 0;
    }
    //choice digrame situatuin 
    //This will add one in lcs if find maths and remove the last elements in strings to check ahead
    //as we are checeking the string from the last
    if(x[m-1] == y[n-1]){
        return 1+(lcs(x, y, m-1, n-1));
    }
    else{
        //breaking in smaller parts
        //If match milte nhi then we run two recursoin seperate in one we decrease x string lenght 
        // and in other we decrease y length and find the max from both of them as 
        // both are chechking the same again some
        return max(lcs(x, y, m, n-1), lcs(x, y, m-1, n));
    }
    
}


int main()
{
    string x = "abcdefg";
    string y = "abcmdej";

    //swcond string chars will match above one but mathicng only forward line will not intersect if character aage piche

    //declaring lcs func which return the int length two strings x and y and length of both the strings
    int val = lcs(x, y, x.length(), y.length());

    cout<<val<<endl;

    //Now check the LCS with memoization 2 part which is optimized for the less work 

    return 0;
}
