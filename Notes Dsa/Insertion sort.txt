#include<stdio.h>


void printArray(int *arr, int len){
    for (int i = 0; i < len; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void inertionSort(int *A, int n){
    int key, j;
    //In insertion sort we will go from 1 index as we left 0 and comapre 1 index to zero. Loop will run till last index
    //Loop for passes 1st  pass then 2nd pass
    for (int i = 1; i <= n-1; i++) 
    {
        key = A[i]; //storing the element which we gonna compare to our assumed array
        j = i-1; //this will be the index in which we gonna shift the element if its smaller in comparision
        //Loop for each pass

        //here a[j] will be the one before element which is in the array seated which will we shift and the key is that
        //which we are comapring shiting to left inside so we can sort the array
        //Here we put j-- coz suppose we found a conditin at 3rd index that a 65 is bigger than 7 now we have shifted 65
        // we also have to comapre the elemen with the 2nd index then 1st then 0th index so j--
        //In condition we also have typed that j>= 0 coz we dont want that j-- start to cmpare less the -1 index after 0 
        //which is not possible
        while (j >= 0 && A[j] > key) //CHehck  DH diary page no. 29
        {
            A[j+1] = A[j];
            j--;
        }
        A[j+1] = key;
        
    }
    
}

int main()
{
    int A[] = {12, 54, 65, 7, 23, 8};
    // int A[] = {7, 8, 12, 23, 54, 65};

    int n = 6; //length of array

    printArray(A, n); //Printing the array before the Insertion sort
    inertionSort(A, n); //InsertionSort
    printArray(A, n); //Printing the array after the Insertion sort

    //Another array which is sorted to make it adaptive which is not by default


    return 0;
}
