#include<stdio.h>
#include<stdlib.h>

// Paranthesis match checker in expression for the programme

struct Stack
{
    int size; // max size of the array
    int top; //top points at the index of the array
    char *arr; //array pointer
};

int isEmpty(struct Stack * ptr){
    if (ptr->top ==-1)
    {
        return 1;
    }
    return 0;
}

int isFull(struct Stack * ptr){
    if (ptr->top == ptr->size-1)
    {
        return 1;
    }
    return 0;
    
}

void push(struct Stack * ptr, char value){
    if (isFull(ptr))
    {
        printf("Stack Overflow.");
        
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = value;
    }   
}

char pop(struct Stack * ptr){
    if (isEmpty(ptr))
    {
        printf("Stack Underflow.");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];

        ptr->top--;
        return val;
    }
}

int paranthesisMatch(char * exp){
    //Create and initialize the stack
    struct Stack * sp = (struct Stack *) malloc(sizeof(struct Stack));
    sp->size = 20;
    sp->top = -1; //when array or stack is empty
    sp->arr = (char *) malloc(sp->size * sizeof(char));
    for (int i = 0; exp[i]!='\0'; i++)
    {
        if (exp[i]=='(')
        {
            push(sp, '(');
        }
        else if (exp[i]==')')
        {
            if (isEmpty(sp))
            {
                return 0;
            }
            pop(sp);
        }
           
    }
    if (isEmpty(sp))
    {
        return 1;
    }
    else{
        return 0;
    }
    
    
}

int main()
{
    char * exp = "(8) * (9))";
   if (paranthesisMatch(exp)){
       printf("Tha Paranthesis is Matching");
   }
   else
   {
        printf("Tha Paranthesis is Not Matching");
   }
   
    return 0;
}
