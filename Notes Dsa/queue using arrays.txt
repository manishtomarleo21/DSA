#include<stdio.h>
#include<stdlib.h>

struct Queue
{
    int size;
    int r; //rear tracker for index when pushing it goes up,, initially -1
    int f; // for front when we pop the element from the queue it goes up the 1
    int * arr;
};

int isFull(struct Queue * q){
    if (q->r == q->size-1)
    {
        return 1;
    }
    return 0;
    
}

int isEmpty(struct Queue * q){
    if (q->r == q->f)
    {
        return 1;
    }
    return 0;
    
}



void enqueue(struct Queue * q, int val){
    if (isFull(q))
    {
        printf("This Queue is Full");
    }
    else{
        q->r++;
        q->arr[q->r] = val;
    }
    
}

int dequeue(struct Queue * q){
    int a =-1;
    if (isEmpty(q))
    {
        printf("This Queue is empty");
    }
    else{
        q->f++;
        a = q->arr[q->f];
    }
    return a;
}   

int main()
{
    struct Queue q;
    q.size = 20;
    q.r = q.f = -1;
    q.arr = (int*) malloc(q.size * sizeof(int));

    

    if (isEmpty(&q))
    {
        printf("The queue is Empty");
    }
    
    //Enqueue few elelments in the queue using array inshort means adding elements
    enqueue(&q, 3); //Here i made q struct without pointer so passing the &for the address
    enqueue(&q, 6); 

    //Dequeuing value means that we are poping the value from the  queue from the top
    printf("Dequeing the element %d ", dequeue(&q));
    printf("Dequeing the element %d ", dequeue(&q));

    if (isFull(&q))
    {
        printf("The queue is Full");
    }



    return 0;
}
