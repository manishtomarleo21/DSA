#include<stdio.h>
#include<stdlib.h>

struct Node
{
    int data;
    struct Node * next;
};

void linkedListTraversal(struct Node * ptr){
    while (ptr!=NULL)
    {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    
}

//Insertion cases
//Case 1 
//Insert the node at the beginning
struct Node * insertAtBegiannig(struct Node * head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
    ptr->next = head;

    return ptr;

}

//Case 2
//Insert at the given index
struct Node * insertAtIndex(struct Node * head, int data, int index){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    struct Node * p = head;

    int i = 0;

    while (i != index-1)
    {
        p = p->next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    
    return head;
}

//Case 3 
//Insertion in End
struct Node * insertAtEnd(struct Node * head, int data){
    
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;

    struct Node * p = head;

    while (p->next!=NULL)
    {
        p = p->next;
    }

    p->next = ptr;
    ptr->next = NULL;

    return head;

}

//Case 4
//Insertion at given node

struct Node * insertAfterNode(struct Node * head, struct Node * prevNode, int data){

    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;

    ptr->next = prevNode->next;
    prevNode->next = ptr;

    return head;
}




int main()
{
    struct Node * head;   
    struct Node * second;   
    struct Node * third;

    head = (struct Node *) malloc(sizeof(struct Node));   
    second = (struct Node *) malloc(sizeof(struct Node));   
    third = (struct Node *) malloc(sizeof(struct Node));   

    head->data = 7;
    head->next = second;

    second->data = 10;
    second->next = third;

    third->data = 13;
    third->next = NULL;

    // linkedListTraversal(head); 
    printf("Case 1. Insertion at the beginning\n");

    head = insertAtBegiannig(head, 3);
    linkedListTraversal(head); 


    printf("\nCase 2. Insertion at the Index\n");

    head = insertAtIndex(head, 23, 2);
    linkedListTraversal(head); 

    printf("\nCase 3. Insertion at the End\n");

    head = insertAtEnd(head, 26);
    linkedListTraversal(head); 


    printf("\nCase 4. Insertion After given node\n");

    head = insertAfterNode(head, third, 11);
    linkedListTraversal(head); 


    return 0;
}
