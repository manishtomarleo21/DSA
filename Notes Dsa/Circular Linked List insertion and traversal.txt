#include<stdio.h>
#include<stdlib.h>

//Circular Linked list

struct Node
{
    int data;
    struct Node * next;
};

void ciruclarLinkedListTraversal(struct Node * head){
    struct Node * ptr = head;

    //See: we are doing once manually as in first step ptr is set = head so it wont run in loop
    //so we printing first head manually and pushing it to second then it will run in the loop
    //and stop when it came back to head
    printf("%d ", ptr->data);
    ptr = ptr->next;
    
    while (ptr!=head)
    {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }

}
//ALternate way of traversal for circular linked list
void alternateWayofTraversalforciruclarLL(struct Node * head){
    struct Node * ptr = head;
    //As we know that if the condition is wrong for once the do while loop will run and then check so
    //we know that first condition is false but it will run and second time it will stop when it meet ptr to head 
    //again

    do
    {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    } while (ptr!=head);
    
}

//INsertion case 1
//Insertion at head in circular linked list

struct Node * insertAtHead(struct Node * head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;

    struct Node * p = head->next;
    while (p->next != head)
    {
        p = p->next;
    }
    //At this point p point to last node in the circular linked list
    p->next = ptr;
    ptr->next = head;
    head = ptr;
    return head;
}





int main()
{
    struct Node * head;
    struct Node * second;
    struct Node * third;
    struct Node * fourth;

    head = (struct Node *) malloc(sizeof(struct Node));
    second = (struct Node *) malloc(sizeof(struct Node));
    third = (struct Node *) malloc(sizeof(struct Node));
    fourth = (struct Node *) malloc(sizeof(struct Node));

    head->data = 3;
    head->next = second;
    
    second->data = 6;
    second->next = third;
    
    third->data = 9;
    third->next = fourth;

    fourth->data = 12;
    fourth->next = head; //we reconnet the last list to head again instead of the Null

    // ciruclarLinkedListTraversal(head);
    // alternateWayofTraversalforciruclarLL(head);

    head = insertAtHead(head, 55);
    alternateWayofTraversalforciruclarLL(head);
    // ciruclarLinkedListTraversal(head);



    return 0;
}
