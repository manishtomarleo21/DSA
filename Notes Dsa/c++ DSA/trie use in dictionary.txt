#include <set>
#include <iostream>
#include <algorithm>
#include <queue>


using namespace std;

class TrieNode
{
    public:
        char data;
        TrieNode* children[26];
        bool isTerminal;

        TrieNode(char ch){
            data = ch;
            for (int i = 0; i < 26; i++)
            {
                children[i] = NULL;
            }
            isTerminal = false;
            
        }
};

class Trie
{
    public:
        TrieNode* root;
        Trie(){
            root = new TrieNode('\0');
        }

        void insertUtil(TrieNode* root, string word){
            //Base case for the recursion
            if(word.length()==0){
                root->isTerminal = true;
                return;
            }

            //assumptiom all the characters in upper letter
            //its word mapping with letter and number A-0 b-1 and z-25
            int index = word[0]-'A'; 
            TrieNode* child;

            //if present in the trie
            if(root->children[index]!=NULL){
                child = root->children[index];
            }
            else{
                //if absent from the trie a char if absent add in the trie
                child = new TrieNode(word[0]);
                root->children[index] = child;
            }

            
            insertUtil(child, word.substr(1));

        }

        void insertWord(string word){
            insertUtil(root, word);
        }

        bool searchUtil(TrieNode* root, string word){
            //base case
            if(word.length()==0){
                return root->isTerminal;
            }

            int index = word[0]-'A';
            TrieNode* child;

            //if present
            if(root->children[index]!=NULL){
                child = root->children[index];
            }
            else{
                //if absence
                return false;
            }

            searchUtil(child, word.substr(1));
        }

        bool searchWord(string word){
            return searchUtil(root, word);
        }

        bool prefixWordUtil(TrieNode* root, string word){
            if(word.length()==0){
                return true;
            }

            int index = word[0]-'A';
            TrieNode* child;

            if(root->children[index]!=NULL){
                child = root->children[index];
            }
            else{
                return false;
            }

            prefixWordUtil(child, word.substr(1));

        }

        bool prefixWord(string word){
            return prefixWordUtil(root, word);
        }


};


int main()
{

    Trie *t = new Trie();
    t->insertWord("HELP");
    



    
    return 0;
}

