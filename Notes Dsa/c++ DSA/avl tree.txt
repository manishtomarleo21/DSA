#include<iostream>

using namespace std;

class Node{
    public:
    int key;
    Node* left;
    Node* right;
    int height;

    Node(int data){
        this->key = data;
        this->height = 1;
        this->left = NULL;
        this->right = NULL;
        
    }

};

int getHeight(Node* n){
    if (n == NULL)
    {
        return 0;
    }
    return n->height;
    
}

Node* creatNode(int key){
    Node* n = new Node(key);
    return n;

}

int getBalanceFactor(Node* root){
    if(root==NULL){
        return 0;
    }
    return(getHeight(root->left)-getHeight(root->right));
}

Node* rightRotate(Node* y){
    //chech dig below that we have given y node if we wan to rotate to right we create x and t2
    //coz we want to rewire only two x y and t2 minly
    Node * x = y->left;
    Node * T2 = x->right;

    //now we are rotating right ways if the balancw factor or insertion in LL(left of left)
    x->right = y;
    y->left = T2;

    //Now for the height updation
    x->height = max(getHeight(x->right), getHeight(x->left))+1;
    y->height = max(getHeight(y->right), getHeight(y->left))+1;

    return x; //after rotation we return new root node now which is x

}

Node* leftRotation(Node* x){
    Node* y = x->right;
    Node* T2 = y->left;

    //now we are left rorating if the insertion is on the RR(right if right)
    y->left = x;
    x->right = T2;

    //Now update the height
    x->height = max(getHeight(x->right), getHeight(x->left))+1;
    y->height = max(getHeight(y->right), getHeight(y->left))+1; 

    return y;
}

Node* insert(Node* root, int key){
    if (root==NULL)
    {
        root = creatNode(key);
    }
    if(key < root->key){
        root->left = insert(root->left, key);
    }
    else if(key > root->key){
        root->right = insert(root->right, key);
    }

    //this will run from the leaf node to the root calculating from the leaf all the Balancing factor(BF)
    //as it is recursion process
    root->height = 1+ max(getHeight(root->left), getHeight(root->right));
    //balance factor
    int bf = getBalanceFactor(root);

    //LL case insertion so we do right rotate
    if(bf > 1 && key < root->left->key){
        return rightRotate(root);
    }
    //RR Right right case where we do left rotatae
    if (bf < -1 && key < root->right->key)
    {
        return leftRotation(root);
    }
    //LR left right case left right insertion
    if (bf > 1 && key > root->left->key) //it shiw left k right me insertion
    {
        root->left = leftRotation(root->left);
        return rightRotate(root);
    }
    //RL case //insertion in right of left
    if( bf < -1 && key < root->right->key)
    {
        root->right = rightRotate(root->right);
        return leftRotation(root);
    }

    return root;
    
}

void preOrderTraversal(Node * root){
    if (root==NULL)
    {
        return ;
    }
    cout<<root->key;
    preOrderTraversal(root->left);
    preOrderTraversal(root->right);

}

int main()
{
    Node * root = NULL;
    root = insert(root, 1);   
    root = insert(root, 2);   
    root = insert(root, 4);   
    root = insert(root, 5);   
    root = insert(root, 6);   
    root = insert(root, 3);

    preOrderTraversal(root);


    return 0;
}

/*
                    y                                      x
                /     \        <<==== Left roated       /    \
              x        T3                              T1    y
            /  \               Right rotated ====>>        /   \
           T1   T2                                        T2    T3





*/
