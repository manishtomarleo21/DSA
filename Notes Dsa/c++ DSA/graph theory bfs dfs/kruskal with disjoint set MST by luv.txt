#include <set>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
#include <stack>
#include <cstring>
#include <string>

using namespace std;

vector<int> parent(100);
vector<int> sizez(100);

void makeSet(int v)
{
    parent[v] = v;
    sizez[v] = 1;
}

int findParent(int v){
    if(parent[v] == v) return v;
    return parent[v] = findParent(parent[v]);
}

void unionSet(int a, int b){
    a = findParent(a);
    b = findParent(b);

    if(a!=b){
        if(sizez[a]<sizez[b]) swap(a,b);
        parent[b] = a;
        sizez[a]+=sizez[b];

    }
}


int main(){
  
   int n, m;
   cin>>n>>m;

    //weight first as it gets sort by it v1, v2
   vector<pair<int, pair<int, int>>> edges;
   for (int i = 0; i < m; i++)
   {
        int u, v, wt;
        cin>>u>>v>>wt;

        edges.push_back({wt, {u, v}});
   }

   sort(edges.begin(), edges.end());

   //now calling make function for all nodes to create a set 
   for (int i = 1; i <= n ; i++)
   {
        makeSet(i);
   }
   
   
   int total_cost = 0;
   for(auto &edge : edges){
    int wt = edge.first;
    int u = edge.second.first;
    int v = edge.second.second;

    //now we will check that loop is creating or not // by checking the parents
    if(findParent(u) == findParent(v)) continue;
    unionSet(u,v);
    total_cost+=wt;
    cout<<u<<" "<<v<<endl;
   }
   cout<<total_cost<<endl;


  	return 0;
}

/*
n m
u v wt
6 9 
5 4 9
1 4 1
5 1 4
4 3 5
4 2 3
1 2 2
3 2 3
3 6 8
2 6 7


*/