#include <set>
#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>
#include <stack>
#include <cstring>
#include <string>

using namespace std;

//non weighted graph bidirection

const int N = 1e3+10; //10^3
//for adjacency matrix
int graph1[100][100]; //this is gloabal and all 2d array will initialize with 0 if we right somewhere else we ha
                 // to for loop to make it zero

// for adjacency list; vector of array
vector<int> graph2[100];

bool visited[100];

void dfs(int vertex){

   cout<< vertex <<endl;
   visited[vertex] = true;

   for(int child : graph2[vertex]){
    // cout<<"parent "<<vertex<<" child - "<<child<<endl;
    if(visited[child]) continue;

    dfs(child);
   } 
}

int main()
{

  // n = no. of vertex || m = no. of connected nodes like (2,3) ||(4,1)
  int n, m;  
  cin>>n>>m;

  for (int i = 0; i < m; i++)
  {
    int v1, v2; //vertex which is connectec
    cin>>v1>>v2;

    //matrix representation of graph
    graph1[v1][v2] = 1;
    graph1[v2][v1] = 1;

    //list representation of graph
    graph2[v1].push_back(v2);
    graph2[v2].push_back(v1);

  }
  
  dfs(graph2[1][0]);

  return 0;
}

/*
 6 9
 1 3
 1 5
 3 5
 3 4
 3 6
 3 2
 2 6
 4 6
 5 6


*/