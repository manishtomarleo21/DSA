#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//This file is for infix to postfix there is also one which is prefix which is not that much important

struct Stack
{
    int size; // max size of the array
    int top; //top points at the index of the array
    char *arr; //array pointer
};

int isEmpty(struct Stack * ptr){
    if (ptr->top ==-1)
    {
        return 1;
    }
    return 0;
}

int isFull(struct Stack * ptr){
    if (ptr->top == ptr->size-1)
    {
        return 1;
    }
    return 0;
    
}
int stackTop(struct Stack * ptr){
    return ptr->arr[ptr->top]; //will provide the top valus from the stack 
}

void push(struct Stack * ptr, char value){
    if (isFull(ptr))
    {
        printf("Stack Overflow.");
        
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = value;
    }   
}

char pop(struct Stack * ptr){
    if (isEmpty(ptr))
    {
        printf("Stack Underflow.");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];

        ptr->top--;
        return val;
    }
}

int precedence(char ch){
    if (ch == '*' || ch == '/')
    {
        return 3;
    }
    else if (ch == '-' || ch == '+')
    {
        return 2;
    }
    else{
        return 0;
    }
    
}

int isOperator(char ch){
    if (ch == '*' || ch == '/' || ch == '+' || ch == '-'){
        return 1;
    }
    return 0;
}

char * infixToPostfix(char * infix){
    struct Stack * sp = (struct Stack *) malloc(sizeof(struct Stack));
    sp->size = 20;
    sp->top = -1;
    sp->arr = (char *) malloc(sp->size * sizeof(char));

    char * postfix = (char *) malloc((strlen(infix)+1) * sizeof(char));
    int i = 0; //for infix traversal counter
    int j = 0; //for postfix updation counter

    while (infix[i]!='\0')
    {
        if (!isOperator(infix[i]))
        {
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else{
            if (precedence(infix[i])>precedence(stackTop(sp)))
            {
                push(sp, infix[i]);
                i++;
            }
            else{
                postfix[j] = pop(sp);
                j++;
            }
            
        }
        
    }
    while (!isEmpty(sp))
    {
        postfix[j] = pop(sp);
        j++;
    }
    postfix[j] = '\0';
    return postfix;    
    
}

int main()
{
    char * infix = "a-b+t/6";
    printf("Postfix is %s", infixToPostfix(infix));
   
   
    return 0;
}
